/* This function takes two integers and return true if
 * the first argument is greater than the second.
 * Otherwise it returns false. */
 fun XGreaterY(x:int, y:int) -> bool {
 let ans:bool = true;
 if (y > x) { ans = false; }
 return ans;
 }

 // Same functionality as function above but using less code
 fun XGreaterY_2(x:int, y:int) -> bool {
 return x > y;
 }


//Allocates memory space for 4 variables (x,y,t0,t1).
 fun AverageOfTwo(x:int, y:int) -> float {
 let t0:int = x + y;
 let t1:float = t0 / 2 as float; //casting expression to a float
 return t1;
}

/* Same functionality as function above but using less code.
 * Note the use of the brackets in the expression following
* the return statement. Allocates space for 2 variables. */
 fun AverageOfTwo_2(x:int, y:int) -> float {
 return (x + y) / 2 as float;
 }

 //Takes two integers and returns the max of the two.
 fun Max(x:int, y:int) -> int {
 let m:int = x;
 if (y > m) { m = y; }
return m;
 }

 __write 10, 14, #00ff00;
 __delay 100;
 __write_box 10, 14, 2, 2, #0000ff;

 for (let i:int = 0; i<10; i=i+1) {
 __print i;
__delay 1000;
}

/* This function takes two colours (players) and a max score.
* A while loop is used to iteratively draw random numbers for the two

* players and advance (along the y-axis) the player that gets the
* highest score. Returns the winner (either 1 or 2) when max score is
reached by any of the players. Winner printed on console.
*/
fun Race(p1_c:colour, p2_c:colour, score_max:int) -> int {
let p1_score:int = 0;
let p2_score:int = 0;

//while (Max(p1_score, p2_score) < score_max) //Alternative loop
while ((p1_score < score_max) and (p2_score < score_max)) {
let p1_toss:int = __random_int(1000);
let p2_toss:int = __random_int(1000);

if (p1_toss > p2_toss) {
p1_score = p1_score + 1;
__write 1, p1_score, p1_c;
} else {
p2_score = p2_score + 1;
__write 2, p2_score, p2_c;
}

__delay 100;
}

if (p2_score > p1_score) {
return 2;
}

return 1;
}
//Execution (program entry point) starts at the first statement
//that is not a function declaration. This should go in the .main
//function of ParIR.

let c1:colour = #00ff00; //green
let c2:colour = #0000ff; //blue
let m:int = __height; //the height (y-values) of the pad
let w:int = Race(c1, c2, m); //call function Race
__print w; //prints value of expression to VM logs